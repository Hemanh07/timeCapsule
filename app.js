// imports
const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const mongoose = require("mongoose");

// router imports
const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');

// initialize an express app object
// and configure the dotenv module to parse .env file
const app = express();
require("dotenv").config();

// disabling the view engine which was
// generated by express-generated package
app.set('views', false);
app.set('view engine', false);

// setting up a database connection
// to MongoDB 
mongoose.set("strictQuery", false);
const mongoDB = process.env.MONGODB_URI;

main().catch((err) => console.log(err));
async function main(){
  await mongoose.connect(mongoDB);
}

// adding middlewares to the middleware chain
// to help us parse form data, parse JSON data
// as well as log errors in case of any error
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

// the code below is a basic implementation of error handling
// it defaults to express's error handler if no handler was found
app.use(function(req, res, next) {
  next(createError(404));
});

app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
